{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Cookies from \"js-cookie\";\nimport MedialistService from \"../../components/backend/medialist.service\";\nconst initialState = {\n  isLoggedIn: false,\n  accessToken: \"\",\n  tokenType: \"\",\n  id: null,\n  username: \"\",\n  roles: [],\n  mediaLists: [],\n  loginTime: \"\"\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      const user = action.payload;\n      state.isLoggedIn = true;\n      state.loginTime = new Date().toLocaleTimeString();\n      state.accessToken = user.accessToken;\n      state.tokenType = user.tokenType;\n      state.id = user.id;\n      state.username = user.username;\n      state.roles = user.roles;\n      state.mediaLists = user.mediaLists;\n    },\n    logout: () => {\n      Cookies.remove('user');\n      return initialState;\n    },\n    setMediaLists: (state, action) => {\n      state.mediaLists = action.payload;\n    }\n  }\n});\nexport default userSlice.reducer;\nexport const {\n  loginSuccess,\n  logout,\n  setMediaLists\n} = userSlice.actions;\nexport const resetMediaLists = createAsyncThunk('posts/addPost', async accessToken => {\n  const response = await fetch('http://localhost:8090/api/medialist/lists', {\n    method: 'GET',\n    headers: new Headers({\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json'\n    })\n  });\n  let data = [];\n  response.json().then(values => {\n    data = values;\n  });\n  console.log(data);\n  return data; // return MedialistService.getLists(accessToken).then(response => {\n  //    if (response.status === 200 && response.data) {\n  //       return response.data.slice().sort((cML, pML) => cML.name.localeCompare(pML.name));\n  //    }\n  // })\n});","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/redux/slices/UserSlice.js"],"names":["createAsyncThunk","createSlice","Cookies","MedialistService","initialState","isLoggedIn","accessToken","tokenType","id","username","roles","mediaLists","loginTime","userSlice","name","reducers","loginSuccess","state","action","user","payload","Date","toLocaleTimeString","logout","remove","setMediaLists","reducer","actions","resetMediaLists","response","fetch","method","headers","Headers","Authorization","Accept","data","json","then","values","console","log"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,UAAU,EAAE,KADM;AAElBC,EAAAA,WAAW,EAAE,EAFK;AAGlBC,EAAAA,SAAS,EAAE,EAHO;AAIlBC,EAAAA,EAAE,EAAE,IAJc;AAKlBC,EAAAA,QAAQ,EAAE,EALQ;AAMlBC,EAAAA,KAAK,EAAE,EANW;AAOlBC,EAAAA,UAAU,EAAE,EAPM;AAQlBC,EAAAA,SAAS,EAAE;AARO,CAArB;AAWA,OAAO,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAClCa,EAAAA,IAAI,EAAE,MAD4B;AAElCV,EAAAA,YAAY,EAAEA,YAFoB;AAGlCW,EAAAA,QAAQ,EAAE;AACPC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACAH,MAAAA,KAAK,CAACZ,UAAN,GAAmB,IAAnB;AACAY,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAIS,IAAJ,GAAWC,kBAAX,EAAlB;AACAL,MAAAA,KAAK,CAACX,WAAN,GAAoBa,IAAI,CAACb,WAAzB;AACAW,MAAAA,KAAK,CAACV,SAAN,GAAkBY,IAAI,CAACZ,SAAvB;AACAU,MAAAA,KAAK,CAACT,EAAN,GAAWW,IAAI,CAACX,EAAhB;AACAS,MAAAA,KAAK,CAACR,QAAN,GAAiBU,IAAI,CAACV,QAAtB;AACAQ,MAAAA,KAAK,CAACP,KAAN,GAAcS,IAAI,CAACT,KAAnB;AACAO,MAAAA,KAAK,CAACN,UAAN,GAAmBQ,IAAI,CAACR,UAAxB;AACF,KAXM;AAYPY,IAAAA,MAAM,EAAE,MAAM;AACXrB,MAAAA,OAAO,CAACsB,MAAR,CAAe,MAAf;AACA,aAAOpB,YAAP;AACF,KAfM;AAgBPqB,IAAAA,aAAa,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACE,OAA1B;AACF;AAlBM;AAHwB,CAAD,CAA7B;AA0BP,eAAeP,SAAS,CAACa,OAAzB;AAEA,OAAO,MAAM;AAAEV,EAAAA,YAAF;AAAgBO,EAAAA,MAAhB;AAAwBE,EAAAA;AAAxB,IAA0CZ,SAAS,CAACc,OAA1D;AAEP,OAAO,MAAMC,eAAe,GAAG5B,gBAAgB,CAAC,eAAD,EAAkB,MAAMM,WAAN,IAAsB;AACpF,QAAMuB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAAD,EAA8C;AACjEC,IAAAA,MAAM,EAAE,KADyD;AAEjEC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAACC,MAAAA,aAAa,EAAG,UAAS5B,WAAY,EAAtC;AAAyC6B,MAAAA,MAAM,EAAE;AAAjD,KAAZ;AAFwD,GAA9C,CAA5B;AAKA,MAAIC,IAAI,GAAG,EAAX;AACAP,EAAAA,QAAQ,CAACQ,IAAT,GAAgBC,IAAhB,CAAqBC,MAAM,IAAI;AAACH,IAAAA,IAAI,GAACG,MAAL;AAAY,GAA5C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,SAAOA,IAAP,CAToF,CAUpF;AACA;AACA;AACA;AACA;AACF,CAf8C,CAAxC","sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport Cookies from \"js-cookie\";\r\nimport MedialistService from \"../../components/backend/medialist.service\";\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   accessToken: \"\",\r\n   tokenType: \"\",\r\n   id: null,\r\n   username: \"\",\r\n   roles: [],\r\n   mediaLists: [],\r\n   loginTime: \"\"\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n   name: 'user',\r\n   initialState: initialState,\r\n   reducers: {\r\n      loginSuccess: (state, action) => {\r\n         const user = action.payload;\r\n         state.isLoggedIn = true;\r\n         state.loginTime = new Date().toLocaleTimeString();\r\n         state.accessToken = user.accessToken;\r\n         state.tokenType = user.tokenType;\r\n         state.id = user.id;\r\n         state.username = user.username;\r\n         state.roles = user.roles;\r\n         state.mediaLists = user.mediaLists;\r\n      },\r\n      logout: () => {\r\n         Cookies.remove('user');\r\n         return initialState;\r\n      },\r\n      setMediaLists: (state, action) => {\r\n         state.mediaLists = action.payload;\r\n      }\r\n   }\r\n});\r\n\r\n\r\nexport default userSlice.reducer;\r\n\r\nexport const { loginSuccess, logout, setMediaLists } = userSlice.actions;\r\n\r\nexport const resetMediaLists = createAsyncThunk('posts/addPost', async(accessToken) => {\r\n   const response = await fetch('http://localhost:8090/api/medialist/lists', {\r\n            method: 'GET',\r\n            headers: new Headers({Authorization: `Bearer ${accessToken}`, Accept: 'application/json'})\r\n         }\r\n    );\r\n   let data = [];\r\n   response.json().then(values => {data=values});\r\n   console.log(data);\r\n   return data;\r\n   // return MedialistService.getLists(accessToken).then(response => {\r\n   //    if (response.status === 200 && response.data) {\r\n   //       return response.data.slice().sort((cML, pML) => cML.name.localeCompare(pML.name));\r\n   //    }\r\n   // })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}