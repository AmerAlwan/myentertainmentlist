{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\me\\\\Desktop\\\\Projects\\\\myentertainmentlist\\\\react-myentertainmentlist\\\\src\\\\components\\\\search\\\\addmediatolist\\\\AddMediaToList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCirclePlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { Dropdown, Row } from \"react-bootstrap\";\nimport './AddMediaToList.css';\nimport MedialistService from \"../../backend/medialist.service\";\nimport { resetMediaLists } from \"../../../redux/slices/UserSlice\"; //import {setMediaLists} from \"../../../redux/slices/UserSlice\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getMedialistType = type => type === 'MEDIA_MOVIE' && 'movie' || type === 'MEDIA_TV' && 'tv' || type === 'MEDIA_GAME' && 'game' || 'all';\n\nexport function AddMediaToList(props) {\n  _s();\n\n  const accessToken = useSelector(state => state.user.accessToken);\n  const mediaLists = useSelector(state => state.mediaLists);\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(resetMediaLists()), []);\n\n  const onDropdownItemSelect = (eventKey, e) => {\n    console.log(eventKey);\n    const mediaListId = eventKey.target.id;\n    const mediaType = props.type;\n    const media = {\n      apiId: props.apiId,\n      title: props.title,\n      posterPath: props.posterPath,\n      releaseYear: props.releaseYear\n    };\n\n    if (mediaType === 'movie') {\n      MedialistService.addMovie(mediaListId, media, accessToken).then(response => {});\n    } else if (mediaType === 'tv') {\n      MedialistService.addTv(mediaListId, media, accessToken).then(response => {});\n    } else if (mediaType === 'game') {\n      MedialistService.addGame(mediaListId, media, accessToken).then(response => {});\n    }\n  };\n\n  const mediaListNames = mediaLists.map(mediaList => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Header, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: mediaList.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"<\" + getMedialistType(mediaList.mediaListType) + \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      id: mediaList.id,\n      onSelect: (eventKey, e) => onDropdownItemSelect(e),\n      children: \"+ Add to list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, mediaList.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-media-list-dropdown\",\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"info\",\n          children: \"Add to Media List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n          children: mediaListNames\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddMediaToList, \"b9IKy3LMjHtYGlkIKMHcwr1zXc8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = AddMediaToList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMediaToList\");","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/search/addmediatolist/AddMediaToList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","FontAwesomeIcon","faCirclePlus","Dropdown","Row","MedialistService","resetMediaLists","getMedialistType","type","AddMediaToList","props","accessToken","state","user","mediaLists","dispatch","onDropdownItemSelect","eventKey","e","console","log","mediaListId","target","id","mediaType","media","apiId","title","posterPath","releaseYear","addMovie","then","response","addTv","addGame","mediaListNames","map","mediaList","textAlign","name","mediaListType"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCirclePlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Dropdown, Row} from \"react-bootstrap\";\r\nimport './AddMediaToList.css';\r\nimport MedialistService from \"../../backend/medialist.service\";\r\nimport {resetMediaLists} from \"../../../redux/slices/UserSlice\";\r\n//import {setMediaLists} from \"../../../redux/slices/UserSlice\";\r\n\r\nconst getMedialistType = type => (type === 'MEDIA_MOVIE' && 'movie') || (type === 'MEDIA_TV' && 'tv') || (type === 'MEDIA_GAME' && 'game') || 'all';\r\n\r\nexport function AddMediaToList(props) {\r\n    const accessToken = useSelector(state => state.user.accessToken);\r\n    const mediaLists = useSelector(state => state.mediaLists);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => dispatch(resetMediaLists()), []);\r\n\r\n    const onDropdownItemSelect = (eventKey, e) => {\r\n        console.log(eventKey);\r\n        const mediaListId = eventKey.target.id;\r\n        const mediaType = props.type;\r\n        const media = {apiId: props.apiId, title: props.title, posterPath: props.posterPath, releaseYear: props.releaseYear};\r\n        if (mediaType === 'movie') {\r\n            MedialistService.addMovie(mediaListId, media, accessToken).then(response => {\r\n            });\r\n        } else if (mediaType === 'tv') {\r\n            MedialistService.addTv(mediaListId, media, accessToken).then(response => {\r\n            });\r\n        } else if (mediaType === 'game') {\r\n            MedialistService.addGame(mediaListId, media, accessToken).then(response => {\r\n            });\r\n        }\r\n    }\r\n\r\n    const mediaListNames = mediaLists.map(mediaList => (\r\n        <div key={mediaList.id}>\r\n            <Dropdown.Header>\r\n                <Row>\r\n                    <h6 style={{textAlign: \"center\"}}>\r\n                        {mediaList.name}\r\n                    </h6>\r\n                </Row>\r\n                <Row>\r\n                    <p style={{textAlign: \"center\"}}>\r\n                        {\"<\" + getMedialistType(mediaList.mediaListType) + \">\"}\r\n                    </p>\r\n                </Row>\r\n            </Dropdown.Header>\r\n            <Dropdown.Item id={mediaList.id} onSelect={(eventKey, e) => onDropdownItemSelect(e)}>\r\n                + Add to list...\r\n            </Dropdown.Item>\r\n            <hr />\r\n        </div>\r\n    ));\r\n    return (\r\n        <>\r\n            <div className=\"add-media-list-dropdown\" style={{textAlign: \"center\"}}>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"info\">\r\n                        Add to Media List\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {mediaListNames}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}