{"ast":null,"code":"import axios from 'axios';\nconst resources = {};\n\nconst makeRequestCreator = () => {\n  let cancel;\n  return async (...query) => {\n    //console.log(query);\n    if (cancel) {\n      // Cancel the previous request before making a new request\n      cancel.cancel();\n    } // Create a new CancelToken\n\n\n    cancel = axios.CancelToken.source();\n\n    try {\n      //      if (resources[query]) {\n      //        // Return result if it exists\n      //        //console.log(\"Returned Exisitng Query\");\n      //        return resources[query];\n      //      }\n      const queries = query.map(q => axios.get(q, {\n        cancelToken: cancel.token\n      }));\n      const res = await axios.all(queries); //console.log(res)\n\n      const result = res; // Store response\n\n      resources[query] = result;\n      return result;\n    } catch (error) {\n      if (axios.isCancel(error)) {// Handle if request was cancelled\n        //console.log('Request canceled', error.message);\n      } else {// Handle usual errors\n          //console.log('Something went wrong: ', error.message);\n        }\n    }\n  };\n};\n\nexport const search = makeRequestCreator();","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/search/util.js"],"names":["axios","resources","makeRequestCreator","cancel","query","CancelToken","source","queries","map","q","get","cancelToken","token","res","all","result","error","isCancel","search"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,MAAIC,MAAJ;AAEA,SAAO,OAAO,GAAGC,KAAV,KAAoB;AACzB;AACA,QAAID,MAAJ,EAAY;AACV;AACAA,MAAAA,MAAM,CAACA,MAAP;AACD,KALwB,CAMzB;;;AACAA,IAAAA,MAAM,GAAGH,KAAK,CAACK,WAAN,CAAkBC,MAAlB,EAAT;;AACA,QAAI;AACR;AACA;AACA;AACA;AACA;AAEM,YAAMC,OAAO,GAAGH,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAKT,KAAK,CAACU,GAAN,CAAUD,CAAV,EAAa;AAACE,QAAAA,WAAW,EAAER,MAAM,CAACS;AAArB,OAAb,CAAhB,CAAhB;AACA,YAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUP,OAAV,CAAlB,CARE,CASF;;AAEA,YAAMQ,MAAM,GAAGF,GAAf,CAXE,CAYF;;AACAZ,MAAAA,SAAS,CAACG,KAAD,CAAT,GAAmBW,MAAnB;AAEA,aAAOA,MAAP;AACD,KAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,UAAIhB,KAAK,CAACiB,QAAN,CAAeD,KAAf,CAAJ,EAA2B,CACzB;AACA;AACD,OAHD,MAGO,CACL;AACA;AACD;AACF;AACF,GAjCD;AAkCD,CArCD;;AAuCA,OAAO,MAAME,MAAM,GAAGhB,kBAAkB,EAAjC","sourcesContent":["import axios from 'axios';\r\n\r\nconst resources = {};\r\n\r\nconst makeRequestCreator = () => {\r\n  let cancel;\r\n\r\n  return async (...query) => {\r\n    //console.log(query);\r\n    if (cancel) {\r\n      // Cancel the previous request before making a new request\r\n      cancel.cancel();\r\n    }\r\n    // Create a new CancelToken\r\n    cancel = axios.CancelToken.source();\r\n    try {\r\n//      if (resources[query]) {\r\n//        // Return result if it exists\r\n//        //console.log(\"Returned Exisitng Query\");\r\n//        return resources[query];\r\n//      }\r\n\r\n      const queries = query.map(q => (axios.get(q, {cancelToken: cancel.token})))\r\n      const res = await axios.all(queries);\r\n      //console.log(res)\r\n\r\n      const result = res\r\n      // Store response\r\n      resources[query] = result;\r\n\r\n      return result;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        // Handle if request was cancelled\r\n        //console.log('Request canceled', error.message);\r\n      } else {\r\n        // Handle usual errors\r\n        //console.log('Something went wrong: ', error.message);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const search = makeRequestCreator()\r\n"]},"metadata":{},"sourceType":"module"}