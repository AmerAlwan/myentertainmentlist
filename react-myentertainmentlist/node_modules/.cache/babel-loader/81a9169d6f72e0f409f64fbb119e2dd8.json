{"ast":null,"code":"import UserDataService from \"./user.service\";\n\nclass Validator {\n  // Checks if there is at least one '@' in the text\n  isEmail(text) {\n    // Match exactly one of '@'\n    return text.match(/@{1}/g);\n  }\n\n  isValidEmail(email) {\n    if (this.isEmail(email)) if (email.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+/igm)) return true;\n    return false;\n  }\n\n  async validateAndCreateUser(form) {\n    let user = {\n      firstName: form.firstName,\n      lastName: form.lastName,\n      username: form.username,\n      email: form.email,\n      password: form.password\n    };\n    return await UserDataService.create(user);\n  }\n\n  async validateLogin(form) {\n    let user = {\n      username: form.username,\n      password: form.password\n    };\n    return await UserDataService.validateLogin(user);\n  }\n\n  validate(isLogin = true, form = undefined) {\n    if (isLogin) {\n      const {\n        username,\n        password\n      } = form;\n      const newErrors = {};\n      if (!username) newErrors.username = 'Please enter a Username/Email';\n      if (!password) newErrors.password = 'Please enter a password!';\n      return newErrors;\n    } else {\n      const {\n        firstName,\n        lastName,\n        email,\n        username,\n        password\n      } = form;\n      const newErrors = {};\n      if (!firstName) newErrors.firstName = 'Please enter a first name!';else if (firstName.length > 30) newErrors.firstName = 'First Name should be under 30 characters!';else if (firstName.length < 2) newErrors.firstName = 'First Name should be over 2 characters!';\n      if (!lastName) newErrors.lastName = 'Please enter a last name!';else if (lastName.length > 30) newErrors.lastName = 'Last Name should be under 30 characters!';else if (lastName.length < 2) newErrors.lastName = 'Last Name should be over 2 characters!';\n      if (!username) newErrors.username = 'Please choose a username!';else if (username.length > 30) newErrors.username = 'Username should be under 30 characters!';else if (username.length < 3) newErrors.username = 'Username should be over 3 characters!';\n      if (!email) newErrors.email = 'Please enter an email!';else if (email.length > 60) newErrors.email = 'Email should be under 60 characters';else if (!this.isValidEmail(email)) newErrors.email = 'Invalid email form!';\n      if (!password) newErrors.password = 'Please enter a password';else if (password.length < 8 || password.length > 16) newErrors.password = 'Password must be 8-16 characters!';\n      return newErrors;\n    }\n  }\n\n}\n\nexport default new Validator();","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/backend/validator.js"],"names":["UserDataService","Validator","isEmail","text","match","isValidEmail","email","validateAndCreateUser","form","user","firstName","lastName","username","password","create","validateLogin","validate","isLogin","undefined","newErrors","length"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,gBAA5B;;AAEA,MAAMC,SAAN,CAAgB;AAEZ;AACAC,EAAAA,OAAO,CAAEC,IAAF,EAAQ;AACX;AACA,WAAOA,IAAI,CAACC,KAAL,CAAW,OAAX,CAAP;AACH;;AAEDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,QAAI,KAAKJ,OAAL,CAAaI,KAAb,CAAJ,EACI,IAAIA,KAAK,CAACF,KAAN,CAAY,iDAAZ,CAAJ,EAAoE,OAAO,IAAP;AACxE,WAAO,KAAP;AACH;;AAE0B,QAArBG,qBAAqB,CAACC,IAAD,EAAO;AAC9B,QAAIC,IAAI,GAAG;AAACC,MAAAA,SAAS,EAAEF,IAAI,CAACE,SAAjB;AAA4BC,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QAA3C;AAAqDC,MAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAApE;AAA8EN,MAAAA,KAAK,EAAEE,IAAI,CAACF,KAA1F;AAAiGO,MAAAA,QAAQ,EAAEL,IAAI,CAACK;AAAhH,KAAX;AACA,WAAO,MAAMb,eAAe,CAACc,MAAhB,CAAuBL,IAAvB,CAAb;AACH;;AAEkB,QAAbM,aAAa,CAACP,IAAD,EAAO;AACtB,QAAIC,IAAI,GAAG;AAACG,MAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAhB;AAA0BC,MAAAA,QAAQ,EAAEL,IAAI,CAACK;AAAzC,KAAX;AACA,WAAO,MAAMb,eAAe,CAACe,aAAhB,CAA8BN,IAA9B,CAAb;AACH;;AAEDO,EAAAA,QAAQ,CAACC,OAAO,GAAG,IAAX,EAAiBT,IAAI,GAAGU,SAAxB,EAAmC;AACvC,QAAID,OAAJ,EAAa;AACT,YAAM;AAACL,QAAAA,QAAD;AAAWC,QAAAA;AAAX,UAAuBL,IAA7B;AACA,YAAMW,SAAS,GAAG,EAAlB;AAEA,UAAI,CAACP,QAAL,EAAeO,SAAS,CAACP,QAAV,GAAqB,+BAArB;AACf,UAAI,CAACC,QAAL,EAAeM,SAAS,CAACN,QAAV,GAAqB,0BAArB;AAEf,aAAOM,SAAP;AAEH,KATD,MASO;AACH,YAAM;AAACT,QAAAA,SAAD;AAAYC,QAAAA,QAAZ;AAAsBL,QAAAA,KAAtB;AAA6BM,QAAAA,QAA7B;AAAuCC,QAAAA;AAAvC,UAAmDL,IAAzD;AACA,YAAMW,SAAS,GAAG,EAAlB;AAEA,UAAI,CAACT,SAAL,EAAgBS,SAAS,CAACT,SAAV,GAAsB,4BAAtB,CAAhB,KACK,IAAIA,SAAS,CAACU,MAAV,GAAmB,EAAvB,EAA2BD,SAAS,CAACT,SAAV,GAAsB,2CAAtB,CAA3B,KACA,IAAIA,SAAS,CAACU,MAAV,GAAmB,CAAvB,EAA0BD,SAAS,CAACT,SAAV,GAAsB,yCAAtB;AAE/B,UAAI,CAACC,QAAL,EAAeQ,SAAS,CAACR,QAAV,GAAqB,2BAArB,CAAf,KACK,IAAIA,QAAQ,CAACS,MAAT,GAAkB,EAAtB,EAA0BD,SAAS,CAACR,QAAV,GAAqB,0CAArB,CAA1B,KACA,IAAIA,QAAQ,CAACS,MAAT,GAAkB,CAAtB,EAAyBD,SAAS,CAACR,QAAV,GAAqB,wCAArB;AAE9B,UAAI,CAACC,QAAL,EAAeO,SAAS,CAACP,QAAV,GAAqB,2BAArB,CAAf,KACK,IAAIA,QAAQ,CAACQ,MAAT,GAAkB,EAAtB,EAA0BD,SAAS,CAACP,QAAV,GAAqB,yCAArB,CAA1B,KACA,IAAIA,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyBD,SAAS,CAACP,QAAV,GAAqB,uCAArB;AAE9B,UAAI,CAACN,KAAL,EAAYa,SAAS,CAACb,KAAV,GAAkB,wBAAlB,CAAZ,KACK,IAAIA,KAAK,CAACc,MAAN,GAAe,EAAnB,EAAuBD,SAAS,CAACb,KAAV,GAAkB,qCAAlB,CAAvB,KACA,IAAI,CAAC,KAAKD,YAAL,CAAkBC,KAAlB,CAAL,EAA+Ba,SAAS,CAACb,KAAV,GAAkB,qBAAlB;AAEpC,UAAI,CAACO,QAAL,EAAeM,SAAS,CAACN,QAAV,GAAqB,yBAArB,CAAf,KACK,IAAIA,QAAQ,CAACO,MAAT,GAAkB,CAAlB,IAAuBP,QAAQ,CAACO,MAAT,GAAkB,EAA7C,EAAiDD,SAAS,CAACN,QAAV,GAAqB,mCAArB;AAEtD,aAAOM,SAAP;AACH;AACJ;;AA3DW;;AA8DhB,eAAe,IAAIlB,SAAJ,EAAf","sourcesContent":["import UserDataService from \"./user.service\"\r\n\r\nclass Validator {\r\n\r\n    // Checks if there is at least one '@' in the text\r\n    isEmail (text) {\r\n        // Match exactly one of '@'\r\n        return text.match(/@{1}/g);\r\n    }\r\n\r\n    isValidEmail(email) {\r\n        if (this.isEmail(email))\r\n            if (email.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+/igm)) return true;\r\n        return false;\r\n    }\r\n\r\n    async validateAndCreateUser(form) {\r\n        let user = {firstName: form.firstName, lastName: form.lastName, username: form.username, email: form.email, password: form.password};\r\n        return await UserDataService.create(user);\r\n    }\r\n\r\n    async validateLogin(form) {\r\n        let user = {username: form.username, password: form.password};\r\n        return await UserDataService.validateLogin(user);\r\n    }\r\n\r\n    validate(isLogin = true, form = undefined) {\r\n        if (isLogin) {\r\n            const {username, password} = form;\r\n            const newErrors = {};\r\n\r\n            if (!username) newErrors.username = 'Please enter a Username/Email'\r\n            if (!password) newErrors.password = 'Please enter a password!'\r\n\r\n            return newErrors;\r\n\r\n        } else {\r\n            const {firstName, lastName, email, username, password} = form;\r\n            const newErrors = {};\r\n\r\n            if (!firstName) newErrors.firstName = 'Please enter a first name!'\r\n            else if (firstName.length > 30) newErrors.firstName = 'First Name should be under 30 characters!'\r\n            else if (firstName.length < 2) newErrors.firstName = 'First Name should be over 2 characters!'\r\n\r\n            if (!lastName) newErrors.lastName = 'Please enter a last name!'\r\n            else if (lastName.length > 30) newErrors.lastName = 'Last Name should be under 30 characters!'\r\n            else if (lastName.length < 2) newErrors.lastName = 'Last Name should be over 2 characters!'\r\n\r\n            if (!username) newErrors.username = 'Please choose a username!'\r\n            else if (username.length > 30) newErrors.username = 'Username should be under 30 characters!'\r\n            else if (username.length < 3) newErrors.username = 'Username should be over 3 characters!'\r\n\r\n            if (!email) newErrors.email = 'Please enter an email!'\r\n            else if (email.length > 60) newErrors.email = 'Email should be under 60 characters'\r\n            else if (!this.isValidEmail(email)) newErrors.email = 'Invalid email form!'\r\n\r\n            if (!password) newErrors.password = 'Please enter a password'\r\n            else if (password.length < 8 || password.length > 16) newErrors.password = 'Password must be 8-16 characters!'\r\n\r\n            return newErrors;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new Validator();"]},"metadata":{},"sourceType":"module"}