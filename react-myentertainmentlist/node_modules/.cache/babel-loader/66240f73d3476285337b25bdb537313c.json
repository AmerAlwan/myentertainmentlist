{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\me\\\\Desktop\\\\Projects\\\\myentertainmentlist\\\\react-myentertainmentlist\\\\src\\\\components\\\\profilepage\\\\medialistcontainer\\\\addmedialist\\\\AddMediaList.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport MedialistService from \"../../../backend/medialist.service\";\nimport { useSelector } from \"react-redux\";\nimport { setMediaLists } from \"../../../../redux/slices/UserSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getMedialistType = type => type === 'MEDIA_MOVIE' && 'movie' || type === 'MEDIA_TV' && 'tv' || type === 'MEDIA_GAME' && 'game' || 'all';\n\nexport function AddMediaList(props) {\n  _s();\n\n  const [mediaListName, setMediaListName] = useState(\"\");\n  const [mediaListDescription, setMediaListDescription] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [mediaListType, setMediaListType] = useState(\"MEDIA_ALL\");\n  const accessToken = useSelector(state => state.user.accessToken);\n  const allMediaTypes = ['MEDIA_ALL', 'MEDIA_MOVIE', 'MEDIA_TV', 'MEDIA_GAME'];\n\n  const saveMediaList = () => {\n    const mediaList = {\n      name: mediaListName,\n      description: mediaListDescription,\n      mediaListType: mediaListType,\n      isPrivate: isPrivate\n    };\n    MedialistService.addMediaList(mediaList, accessToken).then(response => {\n      setMediaListName(\"\");\n      setMediaListDescription(\"\");\n      setIsPrivate(false);\n      setMediaListType(\"\");\n      console.log(response);\n      MedialistService.getLists(accessToken).then(response => response && response.status === 200 && response.data && dispatch(setMediaLists(response.data)));\n    });\n  };\n\n  useEffect(() => {\n    if (!props.addMediaList) {\n      setMediaListName(\"\");\n      setMediaListDescription(\"\");\n      setIsPrivate(false);\n      setMediaListType(\"\");\n    }\n  }, [props.addMediaList]);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: \"media-container\",\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-inner\",\n        style: {\n          height: '500px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          style: {\n            width: '300px',\n            margin: '0 auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: mediaListName,\n              onChange: e => setMediaListName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: mediaListDescription,\n              onChange: e => setMediaListDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: {\n                value: mediaListType,\n                label: getMedialistType(mediaListType)\n              },\n              options: allMediaTypes.map(media => ({\n                value: media,\n                label: getMedialistType(media)\n              })),\n              onChange: selected => setMediaListType(selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              style: {\n                display: 'inline-block'\n              },\n              children: \"Private\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              checked: isPrivate,\n              onChange: () => setIsPrivate(!isPrivate)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: saveMediaList,\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddMediaList, \"2/ftE0QyxmjiKief5Oj9vbm2m0A=\", false, function () {\n  return [useSelector];\n});\n\n_c = AddMediaList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMediaList\");","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/profilepage/medialistcontainer/addmedialist/AddMediaList.js"],"names":["Button","Col","Form","Row","React","useEffect","useState","Select","MedialistService","useSelector","setMediaLists","getMedialistType","type","AddMediaList","props","mediaListName","setMediaListName","mediaListDescription","setMediaListDescription","isPrivate","setIsPrivate","mediaListType","setMediaListType","accessToken","state","user","allMediaTypes","saveMediaList","mediaList","name","description","addMediaList","then","response","console","log","getLists","status","data","dispatch","height","width","margin","e","target","value","label","map","media","selected","display"],"mappings":"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","sourcesContent":["import {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Select from \"react-select\";\r\nimport MedialistService from \"../../../backend/medialist.service\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {setMediaLists} from \"../../../../redux/slices/UserSlice\";\r\n\r\nconst getMedialistType = type => (type === 'MEDIA_MOVIE' && 'movie') || (type === 'MEDIA_TV' && 'tv') || (type === 'MEDIA_GAME' && 'game') || 'all';\r\n\r\nexport function AddMediaList(props) {\r\n    const [mediaListName, setMediaListName] = useState(\"\");\r\n    const [mediaListDescription, setMediaListDescription] = useState(\"\");\r\n    const [isPrivate, setIsPrivate] = useState(false);\r\n    const [mediaListType, setMediaListType] = useState(\"MEDIA_ALL\");\r\n\r\n    const accessToken = useSelector(state => state.user.accessToken);\r\n\r\n    const allMediaTypes = ['MEDIA_ALL', 'MEDIA_MOVIE', 'MEDIA_TV', 'MEDIA_GAME'];\r\n\r\n    const saveMediaList = () => {\r\n        const mediaList = {name: mediaListName, description: mediaListDescription, mediaListType: mediaListType, isPrivate: isPrivate};\r\n        MedialistService.addMediaList(mediaList, accessToken).then(response => {\r\n            setMediaListName(\"\");\r\n            setMediaListDescription(\"\");\r\n            setIsPrivate(false);\r\n            setMediaListType(\"\");\r\n            console.log(response);\r\n            MedialistService.getLists(accessToken).then(response =>\r\n                response && response.status === 200 && response.data && dispatch((setMediaLists(response.data)))\r\n            );\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!props.addMediaList) {\r\n            setMediaListName(\"\");\r\n            setMediaListDescription(\"\");\r\n            setIsPrivate(false);\r\n            setMediaListType(\"\");\r\n        }\r\n    }, [props.addMediaList]);\r\n\r\n    return (\r\n        <Row className=\"media-container\">\r\n            <Col>\r\n                <div className=\"media-inner\" style={{height: '500px'}}>\r\n                    <Form style={{width: '300px', margin: '0 auto'}}>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control type=\"text\" value={mediaListName} onChange={e => setMediaListName(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control type=\"text\" value={mediaListDescription} onChange={e => setMediaListDescription(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Type</Form.Label>\r\n                            <Select\r\n                                value={{value: mediaListType, label: getMedialistType(mediaListType)}}\r\n                                options={allMediaTypes.map(media => ({value: media, label: getMedialistType(media)}))}\r\n                                onChange={selected => setMediaListType(selected.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label style={{display: 'inline-block'}}>Private</Form.Label>\r\n                            <Form.Check type=\"checkbox\" checked={isPrivate} onChange={() => setIsPrivate(!isPrivate)} />\r\n                        </Form.Group>\r\n                        <Button onClick={saveMediaList}>Create</Button>\r\n                    </Form>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}