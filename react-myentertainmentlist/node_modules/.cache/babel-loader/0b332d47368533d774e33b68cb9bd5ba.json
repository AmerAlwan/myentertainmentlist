{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\me\\\\Desktop\\\\Projects\\\\myentertainmentlist\\\\react-myentertainmentlist\\\\src\\\\pages\\\\LoginPage.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport SearchBar from '../components/search/SearchBar';\nimport { Row, Col, Button, Form, Alert, Spinner } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport NavBar from \"../components/navbar/AppNavBar\";\nimport Validator from \"../components/backend/validator\";\nimport { loginSuccess } from \"../redux/slices/UserSlice\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findFormErrors = () => {\n      return Validator.validate(true, this.state.form);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const newErrors = this.findFormErrors();\n\n      if (Object.keys(newErrors).length > 0) {\n        this.setState({\n          errors: newErrors,\n          validated: false\n        });\n      } else {\n        this.setState({\n          isLoading: true\n        }, () => {\n          Validator.validateLogin(this.state.form).then(result => {\n            console.log(result);\n\n            if (result && result.status === 200) {\n              this.props.toggleLoginSuccess(result.data);\n              this.setState({\n                isLoading: false,\n                errors: {},\n                validated: true,\n                isSomethingWrong: false\n              });\n            } else if (result && result.status === 401) {\n              this.setState({\n                isLoading: false,\n                errors: {},\n                validated: false,\n                isSomethingWrong: true,\n                isSomethingWrongError: \"Incorrect username/email or password!\"\n              });\n            } else {\n              this.setState({\n                isLoading: false,\n                isSomethingWrong: true,\n                errors: {},\n                validated: false,\n                isSomethingWrongError: \"Something went wrong!\"\n              });\n            }\n          });\n        });\n      }\n    };\n\n    this.setField = (field, value) => {\n      this.setState(prevState => ({\n        form: { ...prevState.form,\n          [field]: value\n        }\n      }));\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    console.log(this.props.username);\n    this.state = {\n      form: {},\n      errors: {},\n      validated: false,\n      isLoading: false,\n      isSomethingWrong: false,\n      isSomethingWrongError: \"Something went wrong!\"\n    };\n  }\n\n  render() {\n    const isLoggedIn = this.props.isLoggedIn;\n    const username = this.props.username;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        showSearchBar: true,\n        showRegister: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        validated: this.state.validated,\n        onSubmit: this.handleSubmit,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\"\n        },\n        children: [this.state.isSomethingWrong ? /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            margin: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"danger\",\n              children: this.state.isSomethingWrongError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this) : isLoggedIn ? /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            margin: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"success\",\n              children: [\"Successfully logged in as \", username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 26\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            margin: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Username/Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                isInvalid: !!this.state.errors.username,\n                type: \"text\",\n                placeholder: \"Enter Username/Email\",\n                onChange: e => this.setField(\"username\", e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                type: \"invalid\",\n                children: this.state.errors.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            margin: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                isInvalid: !!this.state.errors.password,\n                type: \"password\",\n                placeholder: \"Enter Password\",\n                onChange: e => this.setField(\"password\", e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                type: \"invalid\",\n                children: this.state.errors.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            textAlign: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), this.state.isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        variant: \"primary\",\n        animation: \"border\",\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.user.isLoggedIn,\n  username: state.user.username,\n  lists: state.user.lists\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleLoginSuccess: user => dispatch(loginSuccess(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/pages/LoginPage.js"],"names":["React","Component","useEffect","useState","SearchBar","Row","Col","Button","Form","Alert","Spinner","connect","NavBar","Validator","loginSuccess","Redirect","LoginPage","constructor","props","findFormErrors","validate","state","form","handleSubmit","e","preventDefault","newErrors","Object","keys","length","setState","errors","validated","isLoading","validateLogin","then","result","console","log","status","toggleLoginSuccess","data","isSomethingWrong","isSomethingWrongError","setField","field","value","prevState","bind","username","render","isLoggedIn","position","top","left","transform","margin","target","password","textAlign","mapStateToProps","user","lists","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport SearchBar from '../components/search/SearchBar'\r\nimport { Row, Col, Button, Form, Alert, Spinner } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport NavBar from \"../components/navbar/AppNavBar\";\r\nimport Validator from \"../components/backend/validator\";\r\nimport { loginSuccess } from \"../redux/slices/UserSlice\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        console.log(this.props.username);\r\n        this.state = {\r\n            form: {},\r\n            errors: {},\r\n            validated: false,\r\n            isLoading: false,\r\n            isSomethingWrong: false,\r\n            isSomethingWrongError: \"Something went wrong!\"\r\n         }\r\n    }\r\n\r\n    findFormErrors = () => {\r\n        return Validator.validate(true, this.state.form);\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newErrors = this.findFormErrors();\r\n\r\n        if(Object.keys(newErrors).length > 0) {\r\n            this.setState({errors: newErrors, validated: false});\r\n        } else {\r\n            this.setState({isLoading: true}, () => {\r\n                Validator.validateLogin(this.state.form).then(result => {\r\n                    console.log(result);\r\n                    if (result && result.status === 200) {\r\n                        this.props.toggleLoginSuccess(result.data);\r\n                        this.setState({ isLoading: false, errors: {}, validated: true, isSomethingWrong: false });\r\n                    } else if (result && result.status === 401) {\r\n                        this.setState({ isLoading: false, errors: {}, validated: false, isSomethingWrong: true, isSomethingWrongError: \"Incorrect username/email or password!\" });\r\n                    } else {\r\n                        this.setState({ isLoading: false, isSomethingWrong: true, errors: {}, validated: false, isSomethingWrongError: \"Something went wrong!\" });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    setField = (field, value) => {\r\n        this.setState(prevState => ({\r\n            form: {\r\n                ...prevState.form,\r\n                [field]: value\r\n            }\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const isLoggedIn = this.props.isLoggedIn;\r\n        const username = this.props.username;\r\n        return (\r\n            <>\r\n                <NavBar showSearchBar showRegister/>\r\n                <Form validated={this.state.validated} onSubmit={this.handleSubmit} style={{position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\"}}>\r\n                    {this.state.isSomethingWrong ?\r\n                        (<Row style={{margin: \"1rem 0\"}}>\r\n                            <Col>\r\n                                <Alert variant=\"danger\">{this.state.isSomethingWrongError}</Alert>\r\n                            </Col>\r\n                        </Row>) : isLoggedIn ?\r\n                        (<Row style={{margin: \"1rem 0\"}}>\r\n                            <Col>\r\n                                <Alert variant=\"success\">Successfully logged in as {username}</Alert>\r\n                            </Col>\r\n                        </Row>) : \"\"\r\n                    }\r\n                    <Row style={{margin: \"1rem 0\"}}>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Username/Email</Form.Label>\r\n                                <Form.Control isInvalid={!!this.state.errors.username} type=\"text\" placeholder=\"Enter Username/Email\" onChange={e => this.setField(\"username\", e.target.value)}/>\r\n                                <Form.Control.Feedback type=\"invalid\">{this.state.errors.username}</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{margin: \"1rem 0\"}}>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control isInvalid={!!this.state.errors.password} type=\"password\" placeholder=\"Enter Password\" onChange={e => this.setField(\"password\", e.target.value)}/>\r\n                                <Form.Control.Feedback type=\"invalid\">{this.state.errors.password}</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{textAlign: \"center\"}}>\r\n                        <Col>\r\n                            <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n                { this.state.isLoading ? <Spinner variant=\"primary\" animation=\"border\" style={{position: \"absolute\", top: \"50%\", left: \"50%\"}}></Spinner> : <></> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    username: state.user.username,\r\n    lists: state.user.lists\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleLoginSuccess: user => dispatch(loginSuccess(user))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n"]},"metadata":{},"sourceType":"module"}