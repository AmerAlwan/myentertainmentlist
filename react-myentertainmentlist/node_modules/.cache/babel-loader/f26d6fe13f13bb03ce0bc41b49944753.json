{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Cookies from \"js-cookie\";\nimport MedialistService from \"../../components/backend/medialist.service\";\nconst initialState = {\n  isLoggedIn: false,\n  accessToken: \"\",\n  tokenType: \"\",\n  id: null,\n  username: \"\",\n  roles: [],\n  mediaLists: [],\n  loginTime: \"\"\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      const user = action.payload;\n      return { ...state,\n        isLoggedIn: true,\n        loginTime: new Date().toLocaleTimeString(),\n        accessToken: user.accessToken,\n        tokenType: user.tokenType,\n        id: user.id,\n        username: user.username,\n        roles: user.roles,\n        mediaLists: user.mediaLists\n      };\n    },\n    logout: () => {\n      Cookies.remove('user');\n      return initialState;\n    },\n    setMediaLists: (state, action) => {\n      return { ...state,\n        mediaLists: [...action.payload.slice().sort((cML, pML) => cML.name.localeCompare(pML.name))]\n      };\n    }\n  }\n});\nexport default userSlice.reducer;\nexport const {\n  loginSuccess,\n  logout,\n  setMediaLists\n} = userSlice.actions; // export const resetMediaLists = createAsyncThunk('posts/addPost', async(accessToken) => {\n//    const response = await fetch('http://localhost:8090/api/medialist/lists', {\n//             method: 'GET',\n//             headers: new Headers({Authorization: `Bearer ${accessToken}`, Accept: 'application/json'})\n//          }\n//     );\n//    let data = await response.json();\n//    console.log(data);\n//    return data;\n// });","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/redux/slices/UserSlice.js"],"names":["createAsyncThunk","createSlice","Cookies","MedialistService","initialState","isLoggedIn","accessToken","tokenType","id","username","roles","mediaLists","loginTime","userSlice","name","reducers","loginSuccess","state","action","user","payload","Date","toLocaleTimeString","logout","remove","setMediaLists","slice","sort","cML","pML","localeCompare","reducer","actions"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,UAAU,EAAE,KADM;AAElBC,EAAAA,WAAW,EAAE,EAFK;AAGlBC,EAAAA,SAAS,EAAE,EAHO;AAIlBC,EAAAA,EAAE,EAAE,IAJc;AAKlBC,EAAAA,QAAQ,EAAE,EALQ;AAMlBC,EAAAA,KAAK,EAAE,EANW;AAOlBC,EAAAA,UAAU,EAAE,EAPM;AAQlBC,EAAAA,SAAS,EAAE;AARO,CAArB;AAWA,OAAO,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAClCa,EAAAA,IAAI,EAAE,MAD4B;AAElCV,EAAAA,YAAY,EAAEA,YAFoB;AAGlCW,EAAAA,QAAQ,EAAE;AACPC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,aAAO,EAAC,GAAGH,KAAJ;AACPZ,QAAAA,UAAU,EAAG,IADN;AAEPO,QAAAA,SAAS,EAAG,IAAIS,IAAJ,GAAWC,kBAAX,EAFL;AAGPhB,QAAAA,WAAW,EAAGa,IAAI,CAACb,WAHZ;AAIPC,QAAAA,SAAS,EAAGY,IAAI,CAACZ,SAJV;AAKPC,QAAAA,EAAE,EAAGW,IAAI,CAACX,EALH;AAMPC,QAAAA,QAAQ,EAAGU,IAAI,CAACV,QANT;AAOPC,QAAAA,KAAK,EAAGS,IAAI,CAACT,KAPN;AAQPC,QAAAA,UAAU,EAAGQ,IAAI,CAACR;AARX,OAAP;AAUF,KAbM;AAcPY,IAAAA,MAAM,EAAE,MAAM;AACXrB,MAAAA,OAAO,CAACsB,MAAR,CAAe,MAAf;AACA,aAAOpB,YAAP;AACF,KAjBM;AAkBPqB,IAAAA,aAAa,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/B,aAAO,EAAC,GAAGD,KAAJ;AAAWN,QAAAA,UAAU,EAAE,CAAC,GAAGO,MAAM,CAACE,OAAP,CAAeM,KAAf,GAAuBC,IAAvB,CAA4B,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACd,IAAJ,CAASgB,aAAT,CAAuBD,GAAG,CAACf,IAA3B,CAA1C,CAAJ;AAAvB,OAAP;AACF;AApBM;AAHwB,CAAD,CAA7B;AA4BP,eAAeD,SAAS,CAACkB,OAAzB;AAEA,OAAO,MAAM;AAAEf,EAAAA,YAAF;AAAgBO,EAAAA,MAAhB;AAAwBE,EAAAA;AAAxB,IAA0CZ,SAAS,CAACmB,OAA1D,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport Cookies from \"js-cookie\";\r\nimport MedialistService from \"../../components/backend/medialist.service\";\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   accessToken: \"\",\r\n   tokenType: \"\",\r\n   id: null,\r\n   username: \"\",\r\n   roles: [],\r\n   mediaLists: [],\r\n   loginTime: \"\"\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n   name: 'user',\r\n   initialState: initialState,\r\n   reducers: {\r\n      loginSuccess: (state, action) => {\r\n         const user = action.payload;\r\n         return {...state,\r\n         isLoggedIn : true,\r\n         loginTime : new Date().toLocaleTimeString(),\r\n         accessToken : user.accessToken,\r\n         tokenType : user.tokenType,\r\n         id : user.id,\r\n         username : user.username,\r\n         roles : user.roles,\r\n         mediaLists : user.mediaLists\r\n         }\r\n      },\r\n      logout: () => {\r\n         Cookies.remove('user');\r\n         return initialState;\r\n      },\r\n      setMediaLists: (state, action) => {\r\n         return {...state, mediaLists: [...action.payload.slice().sort((cML, pML) => cML.name.localeCompare(pML.name))]};\r\n      }\r\n   }\r\n});\r\n\r\n\r\nexport default userSlice.reducer;\r\n\r\nexport const { loginSuccess, logout, setMediaLists } = userSlice.actions;\r\n\r\n// export const resetMediaLists = createAsyncThunk('posts/addPost', async(accessToken) => {\r\n//    const response = await fetch('http://localhost:8090/api/medialist/lists', {\r\n//             method: 'GET',\r\n//             headers: new Headers({Authorization: `Bearer ${accessToken}`, Accept: 'application/json'})\r\n//          }\r\n//     );\r\n//    let data = await response.json();\r\n//    console.log(data);\r\n//    return data;\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}