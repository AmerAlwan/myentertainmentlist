{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\me\\\\Desktop\\\\Projects\\\\myentertainmentlist\\\\react-myentertainmentlist\\\\src\\\\components\\\\profilepage\\\\medialistcontainer\\\\MediaListContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Card, Col, Collapse, Fade, Image, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FlippingCard, FlippingCardBack, FlippingCardFront, TaggedContentCard } from \"react-ui-cards\";\nimport { MediaContainer } from \"./mediacontainer/MediaContainer\";\nimport { AddMediaList } from \"./addmedialist/AddMediaList\";\nimport MedialistService from \"../../backend/medialist.service\";\nimport { setMediaLists } from \"../../../redux/slices/UserSlice\";\nimport './MediaListContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getMedialistType = type => type === 'MEDIA_MOVIE' && 'movie' || type === 'MEDIA_TV' && 'tv' || type === 'MEDIA_GAME' && 'game' || 'all';\n\nexport function MediaListContainer(props) {\n  _s();\n\n  const [selectedMediaList, setSelectedMediaList] = useState(null);\n  const [prevSelectedMediaList, setPrevSelectedMediaList] = useState(null);\n  const [addMediaList, setAddMediaList] = useState(false);\n  const [resetMediaList, setResetMediaList] = useState(true);\n  console.log(\"UPDATED\");\n\n  const _mediaLists = useSelector(state => state.user.mediaLists);\n\n  const mediaLists = [..._mediaLists];\n  const accessToken = useSelector(state => state.user.accessToken);\n  const dispatch = useDispatch();\n  const numRows = Math.ceil((mediaLists.length + 1) / 3);\n  const numListCols = 3;\n  const mediaListTitle = `MediaLists (${mediaLists.length})`;\n  const isMobile = window.innerWidth <= 768;\n  useEffect(() => setSelectedMediaList(mediaLists.find(mediaList => selectedMediaList && mediaList.id === selectedMediaList.id) || null), [mediaLists]); // useEffect(() => {\n  //     if (resetMediaList) {\n  //         MedialistService.getLists(accessToken).then(response => {\n  //                 if (response && response.status === 200 && response.data) {\n  //                     dispatch((setMediaLists(response.data)));\n  //                     setResetMediaList(false);\n  //                 }\n  //             }\n  //         );\n  //     }\n  //         // MedialistService.getLists(accessToken).then(response => {\n  //         //     if (response.status === 200) {\n  //         //         setMediaLists(response.data.slice().sort((cML, pML) => cML.name.localeCompare(pML.name)));\n  //         //         setSelectedMediaList(response.data.find(mediaList => selectedMediaList && mediaList.id === selectedMediaList.id) || null);\n  //         //         setResetMediaList(false);\n  //         //     }\n  //         // })\n  // }, [resetMediaList]);\n\n  const deleteMediaList = listId => {\n    MedialistService.deleteMediaList(listId, accessToken).then(response => {\n      MedialistService.getLists(accessToken).then(response => response && response.status === 200 && response.data && dispatch(setMediaLists(response.data)));\n    });\n  };\n\n  if (!mediaLists) return;\n  let mediaListComponents = mediaLists.slice().sort((cML, pML) => cML.name.localeCompare(pML.name)).map((mediaList, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"card-container justify-content-sm-center justify-content-md-center\",\n      children: /*#__PURE__*/_jsxDEV(TaggedContentCard, {\n        href: void 0,\n        onClick: () => {\n          if (selectedMediaList !== null && mediaList.id === selectedMediaList.id) {\n            setPrevSelectedMediaList(selectedMediaList);\n            setSelectedMediaList(null);\n          } else {\n            setPrevSelectedMediaList(selectedMediaList);\n            setTimeout(() => setSelectedMediaList(mediaList), 1000);\n            setAddMediaList(false);\n          }\n        },\n        thumbnail: require(\"../../../images/medialistimages/\" + mediaList.posterName).default,\n        title: mediaList.name,\n        description: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [mediaList.description ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: mediaList.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontStyle: \"italic\"\n            },\n            children: \"No Description...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            onClick: e => {\n              e.stopPropagation();\n              deleteMediaList(mediaList.id);\n              setSelectedMediaList(null);\n            },\n            style: {\n              float: 'right'\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this),\n        tags: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        width: 'calc(' + window.innerWidth + 'px  - 10vw',\n        transform: !isMobile ? 'translateX(' + -34 * (i % numListCols) + '%)' : ''\n      },\n      children: /*#__PURE__*/_jsxDEV(Collapse, {\n        in: selectedMediaList && mediaList.id === selectedMediaList.id,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: (selectedMediaList || prevSelectedMediaList) && /*#__PURE__*/_jsxDEV(MediaContainer, {\n            mediaList: selectedMediaList || prevSelectedMediaList,\n            setResetMediaList: setResetMediaList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 82\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, mediaList.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this));\n  mediaListComponents.push( /*#__PURE__*/_jsxDEV(Row, {\n    className: \"card-container justify-content-sm-center\",\n    children: /*#__PURE__*/_jsxDEV(TaggedContentCard, {\n      href: void 0,\n      onClick: () => {\n        setAddMediaList(!addMediaList);\n        setSelectedMediaList(null);\n      },\n      thumbnail: require(\"../../../images/medialistimages/add_new_medialist.png\").default,\n      title: \"Create\",\n      description: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontStyle: \"italic\"\n        },\n        children: \"Create New MediaList...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 31\n      }, this),\n      tags: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, 'CREATE_NEW_MEDIALIST', false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this));\n  let mediaListRows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    mediaListRows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-sm-center justify-content-md-center\",\n        children: [0, 1, 2].map(col => /*#__PURE__*/_jsxDEV(Col, {\n          xl: 4,\n          xs: 12,\n          children: mediaListComponents[i * 3 + col]\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this));\n  }\n\n  mediaListRows.push( /*#__PURE__*/_jsxDEV(Collapse, {\n    in: addMediaList,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: addMediaList && /*#__PURE__*/_jsxDEV(AddMediaList, {\n          addMediaList: addMediaList,\n          setResetMediaList: setResetMediaList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)\n  }, \"CRATE_NEW_MEDIALIST\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: \"media-lists-container\",\n    children: [console.log('RERENDED'), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-lists-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          marginLeft: '1vw',\n          marginTop: '-3vh',\n          color: 'white'\n        },\n        children: mediaListTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), mediaListRows]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MediaListContainer, \"LVvyj/0HtHt9cio7fwq72ocbriA=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = MediaListContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaListContainer\");","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/profilepage/medialistcontainer/MediaListContainer.js"],"names":["React","useEffect","useState","Button","Card","Col","Collapse","Fade","Image","Row","useDispatch","useSelector","FlippingCard","FlippingCardBack","FlippingCardFront","TaggedContentCard","MediaContainer","AddMediaList","MedialistService","setMediaLists","getMedialistType","type","MediaListContainer","props","selectedMediaList","setSelectedMediaList","prevSelectedMediaList","setPrevSelectedMediaList","addMediaList","setAddMediaList","resetMediaList","setResetMediaList","console","log","_mediaLists","state","user","mediaLists","accessToken","dispatch","numRows","Math","ceil","length","numListCols","mediaListTitle","isMobile","window","innerWidth","find","mediaList","id","deleteMediaList","listId","then","response","getLists","status","data","mediaListComponents","slice","sort","cML","pML","name","localeCompare","map","i","setTimeout","require","posterName","default","description","fontStyle","e","stopPropagation","float","width","transform","push","mediaListRows","col","marginLeft","marginTop","color"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Button, Card, Col, Collapse, Fade, Image, Row} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FlippingCard, FlippingCardBack, FlippingCardFront, TaggedContentCard} from \"react-ui-cards\";\r\nimport {MediaContainer} from \"./mediacontainer/MediaContainer\";\r\nimport {AddMediaList} from \"./addmedialist/AddMediaList\";\r\nimport MedialistService from \"../../backend/medialist.service\";\r\nimport {setMediaLists} from \"../../../redux/slices/UserSlice\";\r\nimport './MediaListContainer.css';\r\n\r\nconst getMedialistType = type => (type === 'MEDIA_MOVIE' && 'movie') || (type === 'MEDIA_TV' && 'tv') || (type === 'MEDIA_GAME' && 'game') || 'all';\r\n\r\nexport function MediaListContainer(props) {\r\n\r\n    const [selectedMediaList, setSelectedMediaList] = useState(null);\r\n    const [prevSelectedMediaList, setPrevSelectedMediaList] = useState(null);\r\n\r\n    const [addMediaList, setAddMediaList] = useState(false);\r\n\r\n    const [resetMediaList, setResetMediaList] = useState(true);\r\n\r\n\r\n    console.log(\"UPDATED\");\r\n\r\n    const _mediaLists = useSelector(state => state.user.mediaLists);\r\n\r\n    const mediaLists = [..._mediaLists];\r\n\r\n    const accessToken = useSelector(state => state.user.accessToken);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const numRows = Math.ceil((mediaLists.length + 1) / 3);\r\n    const numListCols = 3;\r\n\r\n    const mediaListTitle = `MediaLists (${mediaLists.length})`;\r\n\r\n    const isMobile = window.innerWidth <= 768;\r\n\r\n\r\n    useEffect(() => setSelectedMediaList(mediaLists.find(mediaList => selectedMediaList && mediaList.id === selectedMediaList.id) || null), [mediaLists])\r\n\r\n    // useEffect(() => {\r\n    //     if (resetMediaList) {\r\n    //         MedialistService.getLists(accessToken).then(response => {\r\n    //                 if (response && response.status === 200 && response.data) {\r\n    //                     dispatch((setMediaLists(response.data)));\r\n    //                     setResetMediaList(false);\r\n    //                 }\r\n    //             }\r\n    //         );\r\n    //     }\r\n    //         // MedialistService.getLists(accessToken).then(response => {\r\n    //         //     if (response.status === 200) {\r\n    //         //         setMediaLists(response.data.slice().sort((cML, pML) => cML.name.localeCompare(pML.name)));\r\n    //         //         setSelectedMediaList(response.data.find(mediaList => selectedMediaList && mediaList.id === selectedMediaList.id) || null);\r\n    //         //         setResetMediaList(false);\r\n    //         //     }\r\n    //         // })\r\n    // }, [resetMediaList]);\r\n\r\n    const deleteMediaList = listId => {\r\n        MedialistService.deleteMediaList(listId, accessToken).then(response => {\r\n            MedialistService.getLists(accessToken).then(response =>\r\n                response && response.status === 200 && response.data && dispatch((setMediaLists(response.data)))\r\n            );\r\n        });\r\n    }\r\n\r\n    if (!mediaLists) return;\r\n\r\n    let mediaListComponents = mediaLists.slice().sort((cML, pML) => cML.name.localeCompare(pML.name)).map((mediaList, i) => (\r\n        <div key={mediaList.id}>\r\n            <Row className=\"card-container justify-content-sm-center justify-content-md-center\">\r\n                <TaggedContentCard\r\n                    href={void (0)}\r\n                    onClick={() => {\r\n                        if (selectedMediaList !== null && mediaList.id === selectedMediaList.id) {\r\n                            setPrevSelectedMediaList(selectedMediaList);\r\n                            setSelectedMediaList(null);\r\n                        } else {\r\n                            setPrevSelectedMediaList(selectedMediaList);\r\n                            setTimeout(() => setSelectedMediaList(mediaList), 1000);\r\n                            setAddMediaList(false);\r\n                        }\r\n                    }}\r\n                    thumbnail={require(\"../../../images/medialistimages/\" + mediaList.posterName).default}\r\n                    title={mediaList.name}\r\n                    description={(\r\n                        <div>\r\n                            {mediaList.description ?\r\n                                <p>{mediaList.description}</p> :\r\n                                <p style={{fontStyle: \"italic\"}}>No Description...</p>\r\n                            }\r\n                            <Button variant=\"danger\" onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                deleteMediaList(mediaList.id)\r\n                                setSelectedMediaList(null);\r\n                            }} style={{float: 'right'}}>Delete</Button>\r\n                        </div>\r\n                    )}\r\n                    tags={[]}\r\n                />\r\n            </Row>\r\n            <Row style={{\r\n                width: 'calc(' + window.innerWidth + 'px  - 10vw',\r\n                transform: (!isMobile ? 'translateX('+ (-34 * (i % numListCols)) + '%)' : '')\r\n            }}>\r\n                    <Collapse in={selectedMediaList && mediaList.id === selectedMediaList.id}>\r\n                        <div>\r\n                                {(selectedMediaList || prevSelectedMediaList) && <MediaContainer mediaList={selectedMediaList || prevSelectedMediaList}\r\n                                                                      setResetMediaList={setResetMediaList}/>}\r\n                        </div>\r\n                    </Collapse>\r\n            </Row>\r\n        </div>\r\n    ))\r\n    mediaListComponents.push((\r\n        <Row className=\"card-container justify-content-sm-center\" key='CREATE_NEW_MEDIALIST'>\r\n            <TaggedContentCard\r\n                href={void (0)}\r\n                onClick={() => {\r\n                    setAddMediaList(!addMediaList);\r\n                    setSelectedMediaList(null);\r\n                }}\r\n                thumbnail={require(\"../../../images/medialistimages/add_new_medialist.png\").default}\r\n                title=\"Create\"\r\n                description={(<p style={{fontStyle: \"italic\"}}>Create New MediaList...</p>)}\r\n                tags={[]}\r\n            />\r\n        </Row>\r\n    ));\r\n\r\n\r\n    let mediaListRows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n        mediaListRows.push((\r\n            <div key={i}>\r\n                <Row className=\"justify-content-sm-center justify-content-md-center\">\r\n                    {[0, 1, 2].map(col => (\r\n                        <Col xl={4} xs={12} key={col}>\r\n                            {mediaListComponents[(i * 3) + col]}\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    mediaListRows.push((\r\n        <Collapse in={addMediaList} key={\"CRATE_NEW_MEDIALIST\"}>\r\n            <div>\r\n                <Row>\r\n                    {addMediaList && <AddMediaList addMediaList={addMediaList} setResetMediaList={setResetMediaList}/>}\r\n                </Row>\r\n            </div>\r\n        </Collapse>\r\n    ))\r\n\r\n    return (\r\n        <Row className=\"media-lists-container\">\r\n            {console.log('RERENDED')}\r\n                <div className=\"media-lists-inner\">\r\n                    <h1 style={{\r\n                        marginLeft: '1vw',\r\n                        marginTop: '-3vh',\r\n                        color: 'white'\r\n                    }}>{mediaListTitle}</h1>\r\n                    {mediaListRows}\r\n                </div>\r\n        </Row>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}