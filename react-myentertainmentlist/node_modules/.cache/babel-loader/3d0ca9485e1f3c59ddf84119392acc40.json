{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport Cookies from \"js-cookie\";\nimport MedialistService from \"../../components/backend/medialist.service\";\nconst initialState = {\n  isLoggedIn: false,\n  accessToken: \"\",\n  tokenType: \"\",\n  id: null,\n  username: \"\",\n  roles: [],\n  mediaLists: [],\n  loginTime: \"\"\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      const user = action.payload;\n      state.isLoggedIn = true;\n      state.loginTime = new Date().toLocaleTimeString();\n      state.accessToken = user.accessToken;\n      state.tokenType = user.tokenType;\n      state.id = user.id;\n      state.username = user.username;\n      state.roles = user.roles;\n      state.mediaLists = user.mediaLists;\n    },\n    logout: () => {\n      Cookies.remove('user');\n      return initialState;\n    },\n    resetMediaLists: state => {\n      MedialistService.getLists(state.accessToken).then(response => {});\n    }\n  }\n});\nexport default userSlice.reducer;\nexport const {\n  loginSuccess,\n  logout,\n  setMediaLists\n} = userSlice.actions;","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/redux/slices/UserSlice.js"],"names":["createSlice","Cookies","MedialistService","initialState","isLoggedIn","accessToken","tokenType","id","username","roles","mediaLists","loginTime","userSlice","name","reducers","loginSuccess","state","action","user","payload","Date","toLocaleTimeString","logout","remove","resetMediaLists","getLists","then","response","reducer","setMediaLists","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,UAAU,EAAE,KADM;AAElBC,EAAAA,WAAW,EAAE,EAFK;AAGlBC,EAAAA,SAAS,EAAE,EAHO;AAIlBC,EAAAA,EAAE,EAAE,IAJc;AAKlBC,EAAAA,QAAQ,EAAE,EALQ;AAMlBC,EAAAA,KAAK,EAAE,EANW;AAOlBC,EAAAA,UAAU,EAAE,EAPM;AAQlBC,EAAAA,SAAS,EAAE;AARO,CAArB;AAWA,OAAO,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAClCa,EAAAA,IAAI,EAAE,MAD4B;AAElCV,EAAAA,YAAY,EAAEA,YAFoB;AAGlCW,EAAAA,QAAQ,EAAE;AACPC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACAH,MAAAA,KAAK,CAACZ,UAAN,GAAmB,IAAnB;AACAY,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAIS,IAAJ,GAAWC,kBAAX,EAAlB;AACAL,MAAAA,KAAK,CAACX,WAAN,GAAoBa,IAAI,CAACb,WAAzB;AACAW,MAAAA,KAAK,CAACV,SAAN,GAAkBY,IAAI,CAACZ,SAAvB;AACAU,MAAAA,KAAK,CAACT,EAAN,GAAWW,IAAI,CAACX,EAAhB;AACAS,MAAAA,KAAK,CAACR,QAAN,GAAiBU,IAAI,CAACV,QAAtB;AACAQ,MAAAA,KAAK,CAACP,KAAN,GAAcS,IAAI,CAACT,KAAnB;AACAO,MAAAA,KAAK,CAACN,UAAN,GAAmBQ,IAAI,CAACR,UAAxB;AACF,KAXM;AAYPY,IAAAA,MAAM,EAAE,MAAM;AACXrB,MAAAA,OAAO,CAACsB,MAAR,CAAe,MAAf;AACA,aAAOpB,YAAP;AACF,KAfM;AAgBPqB,IAAAA,eAAe,EAAGR,KAAD,IAAW;AACzBd,MAAAA,gBAAgB,CAACuB,QAAjB,CAA0BT,KAAK,CAACX,WAAhC,EAA6CqB,IAA7C,CAAkDC,QAAQ,IAAI,CAE7D,CAFD;AAGF;AApBM;AAHwB,CAAD,CAA7B;AA4BP,eAAef,SAAS,CAACgB,OAAzB;AAEA,OAAO,MAAM;AAAEb,EAAAA,YAAF;AAAgBO,EAAAA,MAAhB;AAAwBO,EAAAA;AAAxB,IAA0CjB,SAAS,CAACkB,OAA1D","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport Cookies from \"js-cookie\";\r\nimport MedialistService from \"../../components/backend/medialist.service\";\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   accessToken: \"\",\r\n   tokenType: \"\",\r\n   id: null,\r\n   username: \"\",\r\n   roles: [],\r\n   mediaLists: [],\r\n   loginTime: \"\"\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n   name: 'user',\r\n   initialState: initialState,\r\n   reducers: {\r\n      loginSuccess: (state, action) => {\r\n         const user = action.payload;\r\n         state.isLoggedIn = true;\r\n         state.loginTime = new Date().toLocaleTimeString();\r\n         state.accessToken = user.accessToken;\r\n         state.tokenType = user.tokenType;\r\n         state.id = user.id;\r\n         state.username = user.username;\r\n         state.roles = user.roles;\r\n         state.mediaLists = user.mediaLists;\r\n      },\r\n      logout: () => {\r\n         Cookies.remove('user');\r\n         return initialState;\r\n      },\r\n      resetMediaLists: (state) => {\r\n         MedialistService.getLists(state.accessToken).then(response => {\r\n\r\n         })\r\n      },\r\n   }\r\n});\r\n\r\n\r\nexport default userSlice.reducer;\r\n\r\nexport const { loginSuccess, logout, setMediaLists } = userSlice.actions;"]},"metadata":{},"sourceType":"module"}