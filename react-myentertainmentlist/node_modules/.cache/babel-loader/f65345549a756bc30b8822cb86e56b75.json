{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\me\\\\Desktop\\\\Projects\\\\myentertainmentlist\\\\react-myentertainmentlist\\\\src\\\\components\\\\search\\\\searchaddmediatolist\\\\SearchAddMediaToList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dropdown, Row } from \"react-bootstrap\";\nimport './SearchAddMediaToList.css';\nimport MedialistService from \"../../backend/medialist.service\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCirclePlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { setMediaLists } from \"../../../redux/slices/UserSlice\";\nimport * as config from \"../../../config.json\";\nimport { search } from \"../util\";\nimport MediaService from \"../../backend/media.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getMedialistType = type => type === 'MEDIA_MOVIE' && 'movie' || type === 'MEDIA_TV' && 'tv' || type === 'MEDIA_GAME' && 'game' || 'all';\n\nexport function SearchAddMediaToList(props) {\n  _s();\n\n  const accessToken = useSelector(state => state.user.accessToken);\n  const mediaLists = useSelector(state => state.user.mediaLists);\n  const dispatch = useDispatch();\n\n  const onDropdownItemSelect = (eventKey, e) => {\n    console.log(eventKey);\n    const mediaListId = eventKey.target.id;\n    const mediaType = props.type;\n    let media = {\n      apiId: props.apiId,\n      title: props.title,\n      posterPath: props.posterPath,\n      playTime: 0,\n      releaseYear: props.releaseYear\n    };\n\n    if (mediaType === 'movie') {\n      MediaService.getMovie(props.apiId).then(response => {\n        media = { ...media,\n          playTime: response.data.runtime\n        };\n        MedialistService.addMovie(mediaListId, media, accessToken).then(response => {\n          MedialistService.getLists(accessToken).then(response => response && response.status === 200 && response.data && dispatch(setMediaLists(response.data)));\n        });\n      });\n    } else if (mediaType === 'tv') {\n      MediaService.getTv(props.apiId).then(response => {\n        console.log(response);\n        let episode_run_time = response.data.episode_run_time;\n        let episode_run_time_avg = !episode_run_time || episode_run_time.length === 0 ? 0 : episode_run_time.reduce((acc, curr) => acc + curr) / episode_run_time.length;\n        console.log(episode_run_time_avg);\n        let total_playtime = response.data.seasons ? response.data.seasons.reduce((acc, curr) => curr.episode_count * episode_run_time_avg + acc) : 0;\n        console.log(total_playtime);\n        media = { ...media,\n          playTime: total_playtime\n        };\n        MedialistService.addTv(mediaListId, media, accessToken).then(response => {\n          MedialistService.getLists(accessToken).then(response => response && response.status === 200 && response.data && dispatch(setMediaLists(response.data)));\n        });\n      });\n    } else if (mediaType === 'game') {\n      MediaService.getGame(props.apiId).then(response => {\n        media = { ...media,\n          playTime: response.data.playtime * 60\n        };\n        MedialistService.addGame(mediaListId, media, accessToken).then(response => {\n          MedialistService.getLists(accessToken).then(response => response && response.status === 200 && response.data && dispatch(setMediaLists(response.data)));\n        });\n      });\n    }\n  };\n\n  const mediaListNames = mediaLists.map(mediaList => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Header, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: mediaList.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"<\" + getMedialistType(mediaList.mediaListType) + \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      id: mediaList.id,\n      onSelect: (eventKey, e) => onDropdownItemSelect(e),\n      children: \"+ Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, mediaList.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-add-media-list-dropdown\",\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          style: {\n            backgroundColor: 'transparent',\n            border: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCirclePlus,\n            style: {\n              height: '20px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n          children: mediaListNames\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SearchAddMediaToList, \"tUydGq5tTE1xARlorf+xrsCbQRI=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = SearchAddMediaToList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAddMediaToList\");","map":{"version":3,"sources":["C:/Users/me/Desktop/Projects/myentertainmentlist/react-myentertainmentlist/src/components/search/searchaddmediatolist/SearchAddMediaToList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Dropdown","Row","MedialistService","FontAwesomeIcon","faCirclePlus","setMediaLists","config","search","MediaService","getMedialistType","type","SearchAddMediaToList","props","accessToken","state","user","mediaLists","dispatch","onDropdownItemSelect","eventKey","e","console","log","mediaListId","target","id","mediaType","media","apiId","title","posterPath","playTime","releaseYear","getMovie","then","response","data","runtime","addMovie","getLists","status","getTv","episode_run_time","episode_run_time_avg","length","reduce","acc","curr","total_playtime","seasons","episode_count","addTv","getGame","playtime","addGame","mediaListNames","map","mediaList","textAlign","name","mediaListType","stopPropagation","backgroundColor","border","height"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dropdown, Row} from \"react-bootstrap\";\r\nimport './SearchAddMediaToList.css';\r\nimport MedialistService from \"../../backend/medialist.service\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCirclePlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {setMediaLists} from \"../../../redux/slices/UserSlice\";\r\nimport * as config from \"../../../config.json\";\r\nimport {search} from \"../util\";\r\nimport MediaService from \"../../backend/media.service\";\r\n\r\nconst getMedialistType = type => (type === 'MEDIA_MOVIE' && 'movie') || (type === 'MEDIA_TV' && 'tv') || (type === 'MEDIA_GAME' && 'game') || 'all';\r\n\r\nexport function SearchAddMediaToList(props) {\r\n    const accessToken = useSelector(state => state.user.accessToken);\r\n    const mediaLists = useSelector(state => state.user.mediaLists);\r\n    const dispatch = useDispatch();\r\n\r\n    const onDropdownItemSelect = (eventKey, e) => {\r\n        console.log(eventKey);\r\n        const mediaListId = eventKey.target.id;\r\n        const mediaType = props.type;\r\n        let media = {apiId: props.apiId, title: props.title, posterPath: props.posterPath, playTime: 0, releaseYear: props.releaseYear};\r\n        if (mediaType === 'movie') {\r\n           MediaService.getMovie(props.apiId).then(response => {\r\n               media = {...media, playTime: response.data.runtime};\r\n               MedialistService.addMovie(mediaListId, media, accessToken).then(response => {\r\n                   MedialistService.getLists(accessToken).then(response =>\r\n                       response && response.status === 200 && response.data && dispatch((setMediaLists(response.data)))\r\n                   );\r\n                })\r\n               }\r\n           )\r\n\r\n        } else if (mediaType === 'tv') {\r\n            MediaService.getTv(props.apiId).then(response => {\r\n                console.log(response);\r\n                let episode_run_time = response.data.episode_run_time;\r\n                let episode_run_time_avg = ((!episode_run_time || episode_run_time.length === 0) ? 0 : (episode_run_time.reduce((acc, curr) => acc + curr) / episode_run_time.length));\r\n                console.log(episode_run_time_avg);\r\n                let total_playtime = (response.data.seasons ? response.data.seasons.reduce((acc, curr) => (curr.episode_count * episode_run_time_avg) + acc) : 0);\r\n                console.log(total_playtime);\r\n                media = {...media, playTime: total_playtime};\r\n                MedialistService.addTv(mediaListId, media, accessToken).then(response => {\r\n                    MedialistService.getLists(accessToken).then(response =>\r\n                        response && response.status === 200 && response.data && dispatch((setMediaLists(response.data)))\r\n                    );\r\n                });\r\n            });\r\n          } else if (mediaType === 'game') {\r\n            MediaService.getGame(props.apiId).then(response => {\r\n                media = {...media, playTime: response.data.playtime * 60};\r\n                MedialistService.addGame(mediaListId, media, accessToken).then(response => {\r\n                    MedialistService.getLists(accessToken).then(response =>\r\n                        response && response.status === 200 && response.data && dispatch((setMediaLists(response.data)))\r\n                    );\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    const mediaListNames = mediaLists.map(mediaList => (\r\n        <div key={mediaList.id}>\r\n            <Dropdown.Header>\r\n                <Row>\r\n                    <h6 style={{textAlign: \"center\"}}>\r\n                        {mediaList.name}\r\n                    </h6>\r\n                </Row>\r\n                <Row>\r\n                    <p style={{textAlign: \"center\"}}>\r\n                        {\"<\" + getMedialistType(mediaList.mediaListType) + \">\"}\r\n                    </p>\r\n                </Row>\r\n            </Dropdown.Header>\r\n            <Dropdown.Item id={mediaList.id} onSelect={(eventKey, e) => onDropdownItemSelect(e)}>\r\n                + Add\r\n            </Dropdown.Item>\r\n            <hr />\r\n        </div>\r\n    ));\r\n    return (\r\n        <>\r\n            <div className=\"search-add-media-list-dropdown\" style={{textAlign: \"center\"}}>\r\n                <Dropdown onClick={e => e.stopPropagation()}>\r\n                    <Dropdown.Toggle style={{\r\n                        backgroundColor: 'transparent',\r\n                        border: 'none'\r\n                    }}>\r\n                        <FontAwesomeIcon icon={faCirclePlus} style={{\r\n                            height: '20px'\r\n                        }}/>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {mediaListNames}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}