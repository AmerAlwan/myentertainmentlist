{"version":3,"file":"react-suspense-img.cjs.development.js","sources":["../src/utils/index.ts","../src/resource/index.ts","../src/img/index.tsx"],"sourcesContent":["/**\n * Given a value, determine if it's a promise.\n *\n * @returns true if the value is a promise, false otherwise.\n *\n * @param promise the value to check if it's a promise\n */\nexport const isPromise = (promise: any): promise is Promise<any> =>\n  !!promise && typeof promise.then === 'function';\n","import invariant from 'invariant';\n\nimport { isPromise } from '../utils';\n\n/**\n * The potential values that can be in the cache.\n *\n * - `Promise`: the image is loading.\n * - `Error`: an error occurred loading the image.\n * - `true`: the image was loaded successfully.\n */\ntype CacheValue = Promise<string> | Error | true;\n\ninterface ResourceCache {\n  [src: string]: CacheValue;\n}\n\n/**\n * A simple resource to load images and suspend with React Concurrent mode.\n *\n * This is currently a pretty naive implementation that is inspired by a few\n * early demo apps and the Relay implementation. It has an infinite \"cache\"\n * size and relies on loading an image via JavaScript into the browser's cache.\n * Since the image itself is not stored in the internal resource's cache the\n * value is simply a boolean. There are likely many improvements that can be\n * made but without a lot of real world examples and use cases it's hard to\n * tell what needs to be more robust or where there may be edge cases.\n */\nclass Resource {\n  private _cache: ResourceCache;\n\n  constructor() {\n    this._cache = {};\n  }\n\n  /**\n   * Read an image by source from the cache. If it's cached, the source will\n   * be returned. If it's not, a promise will be thrown. If it was attempted\n   * but an error occurred an error will be thrown.\n   *\n   * @returns the source string if loaded, can also throw a promise and error.\n   *\n   * @param src the image source to read\n   */\n  public read = (src: string): string => {\n    const cachedValue = this._cache[src];\n\n    // 1. Check if the request to load the image is already in-flight or an\n    // error has already occurred trying to load it.\n    if (isPromise(cachedValue) || cachedValue instanceof Error) {\n      throw cachedValue;\n    }\n\n    // 2. If it exists in the cache, the image has already been loaded.\n    if (cachedValue === true) {\n      return src;\n    }\n\n    // 3. It doesn't exist so it needs to be fetched. Ideally, this line is\n    // never hit because that means the image was never preloaded.\n    invariant(\n      !cachedValue,\n      `An image was loaded that wasn't preloaded.\\n` +\n        `Consider adding \\`resource.preloadImage(\"${src}\")\\`` +\n        ` before using with <Img src=\"${src}\" />`\n    );\n\n    this.preloadImage(src);\n    throw this._cache[src];\n  };\n\n  /**\n   * Preload an image by source. Call this before trying to read an image.\n   *\n   * @param src the image source to load\n   */\n  public preloadImage = (src: string) => {\n    const cachedValue = this._cache[src];\n\n    // 1. Check if the request to load the image is already in-flight or an\n    // error has already occurred trying to load it.\n    if (isPromise(cachedValue) || cachedValue instanceof Error) {\n      return cachedValue;\n    }\n\n    // 2. If it exists in the cache, the image has already been loaded.\n    if (cachedValue === true) {\n      return src;\n    }\n\n    const promise = new Promise<string>((resolve, reject) => {\n      const img = new Image();\n\n      img.onload = () => {\n        this._cache[src] = true;\n        resolve(src);\n      };\n\n      img.onerror = () => {\n        this._cache[src] = new Error(\n          `An error occurred loading the image: \"${src}\"`\n        );\n        reject();\n      };\n\n      img.src = src;\n    });\n\n    this._cache[src] = promise;\n\n    return promise;\n  };\n\n  /**\n   * Clear every image from the resource cache.\n   */\n  public clear = () => {\n    this._cache = {};\n  };\n}\n\n// Initialize a single global resource for all images.\nconst resource = new Resource();\n\nexport { resource };\n","import * as React from 'react';\n\nimport { resource } from '../resource';\n\ntype StandardImageProps = JSX.IntrinsicElements['img'];\n\ninterface Props extends StandardImageProps {\n  src: string;\n}\n\n/**\n * Renders an image. If the image has not loaded yet it will suspend. If there\n * is an error while the image loads it will throw.\n *\n * @param props standard image attributes\n */\nconst Img = (props: Props) => {\n  const { src, alt, ...rest } = props;\n\n  const loadedSrc = resource.read(src);\n\n  return <img {...rest} alt={alt} src={loadedSrc} />;\n};\n\nexport { Img };\n"],"names":["isPromise","promise","then","Resource","src","cachedValue","_cache","Error","invariant","preloadImage","Promise","resolve","reject","img","Image","onload","onerror","resource","Img","props","alt","rest","loadedSrc","read","React"],"mappings":";;;;;;;AAAA;;;;;;;AAOA,AAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;SACvB,CAAC,CAACA,OAAF,IAAa,OAAOA,OAAO,CAACC,IAAf,KAAwB,UADd;CAAlB;;ACUP;;;;;;;;;;;;IAWMC,WAGJ;;;;;;;;;;;;WAaO,GAAO,UAACC,GAAD;QACNC,WAAW,GAAG,KAAI,CAACC,MAAL,CAAYF,GAAZ,CAApB;;;QAIIJ,SAAS,CAACK,WAAD,CAAT,IAA0BA,WAAW,YAAYE,KAArD,EAA4D;YACpDF,WAAN;;;;QAIEA,WAAW,KAAK,IAApB,EAA0B;aACjBD,GAAP;;;;;KAMA,CAACC,WADH,IAAAG,SAAS,QAEP,gGAC8CJ,GAD9C,iDAEkCA,GAFlC,WAFO,CAAT,CAAA;;IAOA,KAAI,CAACK,YAAL,CAAkBL,GAAlB;;UACM,KAAI,CAACE,MAAL,CAAYF,GAAZ,CAAN;GAxBK;;;;;;;;mBAgCA,GAAe,UAACA,GAAD;QACdC,WAAW,GAAG,KAAI,CAACC,MAAL,CAAYF,GAAZ,CAApB;;;QAIIJ,SAAS,CAACK,WAAD,CAAT,IAA0BA,WAAW,YAAYE,KAArD,EAA4D;aACnDF,WAAP;;;;QAIEA,WAAW,KAAK,IAApB,EAA0B;aACjBD,GAAP;;;QAGIH,OAAO,GAAG,IAAIS,OAAJ,CAAoB,UAACC,OAAD,EAAUC,MAAV;UAC5BC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;MAEAD,GAAG,CAACE,MAAJ,GAAa;QACX,KAAI,CAACT,MAAL,CAAYF,GAAZ,IAAmB,IAAnB;QACAO,OAAO,CAACP,GAAD,CAAP;OAFF;;MAKAS,GAAG,CAACG,OAAJ,GAAc;QACZ,KAAI,CAACV,MAAL,CAAYF,GAAZ,IAAmB,IAAIG,KAAJ,6CACwBH,GADxB,QAAnB;QAGAQ,MAAM;OAJR;;MAOAC,GAAG,CAACT,GAAJ,GAAUA,GAAV;KAfc,CAAhB;IAkBA,KAAI,CAACE,MAAL,CAAYF,GAAZ,IAAmBH,OAAnB;WAEOA,OAAP;GAlCK;;;;;;YAwCA,GAAQ;IACb,KAAI,CAACK,MAAL,GAAc,EAAd;GADK;;OApFAA,MAAL,GAAc,EAAd;;;;AA0FJ,IAAMW,QAAQ;;AAAG,IAAId,QAAJ,EAAjB;;;;;;;;;;;;;;;;;AChHA;;;;;;;AAMA,IAAMe,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD;MACFf,MAAsBe,MAAtBf;MAAKgB,MAAiBD,MAAjBC;MAAQC,qCAASF;;MAExBG,SAAS,GAAGL,QAAQ,CAACM,IAAT,CAAcnB,GAAd,CAAlB;SAEOoB,mBAAA,MAAA,oBAASH;IAAMD,GAAG,EAAEA;IAAKhB,GAAG,EAAEkB;IAA9B,CAAP;CALF;;;;;"}