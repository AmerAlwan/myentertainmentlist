/**
 * A simple resource to load images and suspend with React Concurrent mode.
 *
 * This is currently a pretty naive implementation that is inspired by a few
 * early demo apps and the Relay implementation. It has an infinite "cache"
 * size and relies on loading an image via JavaScript into the browser's cache.
 * Since the image itself is not stored in the internal resource's cache the
 * value is simply a boolean. There are likely many improvements that can be
 * made but without a lot of real world examples and use cases it's hard to
 * tell what needs to be more robust or where there may be edge cases.
 */
declare class Resource {
    private _cache;
    constructor();
    /**
     * Read an image by source from the cache. If it's cached, the source will
     * be returned. If it's not, a promise will be thrown. If it was attempted
     * but an error occurred an error will be thrown.
     *
     * @returns the source string if loaded, can also throw a promise and error.
     *
     * @param src the image source to read
     */
    read: (src: string) => string;
    /**
     * Preload an image by source. Call this before trying to read an image.
     *
     * @param src the image source to load
     */
    preloadImage: (src: string) => string | Promise<string> | Error;
    /**
     * Clear every image from the resource cache.
     */
    clear: () => void;
}
declare const resource: Resource;
export { resource };
